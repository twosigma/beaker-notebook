/*
 *  Copyright 2017 TWO SIGMA OPEN SOURCE, LLC
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'maven-publish'

def final kernelIdName = 'scala'
def final toReplace = '__PATH__'

mainClassName = 'com.twosigma.beaker.scala.ScalaKernel'

configurations {
  antlr
}

//need for compiling scala before java
sourceSets {
  main {
    scala {
      srcDirs = ['src/main/scala', 'src/main/java']
    }
    java {
      srcDirs = []
    }
  }
}

repositories {
  mavenCentral()
}

dependencies {
  compile project(':kernel:base')
  compile group: 'org.antlr', name: 'antlr4-runtime', version: '4.5'
  compile group: 'org.scala-lang', name: 'scala-compiler', version: '2.12.2'
  compile group: 'org.scala-lang', name: 'scala-library', version: '2.12.2'
  compile group: 'jline', name: 'jline', version: '2.12'
  compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-scala_2.12', version: '2.7.9'

  testCompile project(':kernel:base').sourceSets.test.output
  testCompile group: 'junit', name: 'junit', version: '4.11'
  testCompile group: 'org.assertj', name: 'assertj-core', version: '3.6.1'
  testCompile group: 'org.reflections', name: 'reflections', version: '0.9.10'
}

jar {
  manifest {
    attributes "Main-Class": "$mainClassName"
  }

  from {
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  } {
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
  }
}

task prepareJson(dependsOn: 'build') {
  doLast {
    println "Prepare JSON for Jupyter notebook"
    println "Copy kernel.json to build/libs/json/ and replasing PATH with scala.jar parh"

    def jarLocation = file('build/libs/scala.jar').getAbsolutePath()
    jarLocation = jarLocation.replace("\\", "/");
    def text = file('kernel.json').text.replace(toReplace, jarLocation)
    def folder = file('build/libs/json')
    if (!folder.exists()) {
      println "Creating folder build/libs/json"
      folder.mkdirs()
    }

    file('build/libs/json/kernel.json').withWriter { w ->
      w << text
    }
  }
}

task kernelInstall(dependsOn: 'prepareJson') {
  doLast {
    println "Installing 'Scala' to jupyter notebook"

    def hashStdOut = new ByteArrayOutputStream()
    def jsonFolder = file('build/libs/json/').getAbsolutePath();
    exec {
      commandLine "jupyter",
              "kernelspec",
              "install",
              "--sys-prefix",
              "--replace",
              "--name",
              kernelIdName,
              jsonFolder;
      standardOutput = hashStdOut
    }
    println hashStdOut.toString().trim();
    println "DONE"
  }
}

task realclean
realclean.dependsOn(clean)
// should also remove
// GroovyLexer.java GroovyLexer.tokens GroovyParser.java GroovyParser.tokens
// GroovyParserBaseListener.java GroovyParserListener.java

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.twosigma'
            artifactId 'beaker-kernel-scala'
            version '2.0-SNAPSHOT'

            from components.java
        }
    }
}
