/*
 *  Copyright 2017 TWO SIGMA OPEN SOURCE, LLC
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
import groovy.time.TimeCategory

allprojects {
  repositories {
    maven { url 'https://jitpack.io' }
  }
}

subprojects {
  apply plugin: 'jacoco'
  apply plugin: 'java'
  apply plugin: 'maven'

  ext {
    antlr4Version = "4.5"
  }

  jacoco {
    toolVersion = "0.7.8"
  }
  jacocoTestReport {
    reports {
      html.enabled = true
      xml.enabled = false
      csv.enabled = false
    }
  }

  test.finalizedBy jacocoTestReport

  test {
    systemProperties 'java.awt.headless': "true"
    if (project.hasProperty('showTestOut')) {
      testLogging {
        showStandardStreams = true
      }
    }
  }
  ext.pathToStaticContent = '../../beakerx/beakerx/kernel/'

  test {
    testLogging {
      afterSuite { desc, result ->
        if (!desc.parent) {
          println "Tests run: ${result.testCount}, Successes: ${result.successfulTestCount}, Failures: ${result.failedTestCount}, Skipped: ${result.skippedTestCount}, Total time: ${TimeCategory.minus(new Date(result.endTime), new Date(result.startTime))} "
        }
      }
    }
  }

  task staticContent {
    doLast {
      copy {
        from '.'
        into pathToStaticContent + kernelIdName
        include '*.png'
        include 'kernel.json'
      }
    }
  }
  build.finalizedBy staticContent

  task cleanStaticContent {
    doLast {
      delete pathToStaticContent + kernelIdName
    }
  }

  task myJavadocs(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = configurations.compile
    javadoc.destinationDir = file("$rootDir/../beakerx/beakerx/javadoc")
    javadoc.include 'com/twosigma/beakerx/chart/**'
    javadoc.include 'com/twosigma/beakerx/easyform/**'
    javadoc.include 'com/twosigma/beakerx/table/**'
    javadoc.include 'com/twosigma/beakerx/mimetype/**'
    javadoc.include 'com/twosigma/beakerx/jvm/object/**'
    javadoc.exclude '**/serializer/**'
  }

  afterEvaluate {
    javadoc.classpath += files(project(':kernel:base').sourceSets.main.output)
  }

  clean.dependsOn cleanStaticContent
}
