/*
 *  Copyright 2014 TWO SIGMA OPEN SOURCE, LLC
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
apply plugin: 'java'
apply plugin: 'groovy'

repositories {
  mavenCentral()
}

apply plugin:'application'
mainClassName = 'com.twosigma.beaker.groovy.Main'

configurations {
  provided
  antlr
  compile.extendsFrom provided
}

dependencies {
  provided project(':plugin:jvm')
  // would prefer "groovy" over "groovy-all" but that gives me this problem:
  // http://stackoverflow.com/questions/11738732/exception-java-lang-incompatibleclasschangeerror-while-running-groovy-in-eclipse
  provided group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.3'
  compile group: 'org.antlr', name: 'antlr4-runtime', version: '4.5'
  antlr group : 'org.antlr', name :'antlr4', version: '4.5'
  compile group: 'org.apache.ivy', name:'ivy', version:'2.2.0' 
  compile 'com.lowagie:itext:2.1.7'
  compile 'org.graxxia:graxxia:0.9'
  compile 'org.apache.commons:commons-math3:3.5'
  compile 'junit:junit:4.4'
  compile 'commons-cli:commons-cli:1.1'
  compile 'com.xlson.groovycsv:groovycsv:1.0'
  compile 'log4j:log4j:1.2.17'
}

task antlr4_groovy_lexer(type: JavaExec) {
    main = "org.antlr.v4.Tool"
    workingDir = "src/main/antlr4/"
    args = ["GroovyLexer.g4", "-o", "../java/com/twosigma/beaker/groovy/autocomplete","-listener", "-no-visitor", "-package", "com.twosigma.beaker.groovy.autocomplete", "-encoding", "UTF-8" ]
    classpath =  configurations.antlr
}
task antlr4_groovy_parser(type: JavaExec) {
    main = "org.antlr.v4.Tool"
    workingDir = "src/main/antlr4/"
    args = ["GroovyParser.g4", "-o", "../java/com/twosigma/beaker/groovy/autocomplete","-listener", "-no-visitor", "-package", "com.twosigma.beaker.groovy.autocomplete", "-encoding", "UTF-8" ]
    classpath =  configurations.antlr
}
compileJava.dependsOn antlr4_groovy_lexer
compileJava.dependsOn antlr4_groovy_parser

compileJava {
  options.compilerArgs << '-Xlint:deprecation'
  options.compilerArgs << '-Xlint:unchecked'
}

// Fix command-length issue in windows startscript
task pathingJar(type: Jar) {
  appendix = 'pathing'
  manifest {
	//skip groovy jars, let it be picked during runtime, using env GROOVY_JAR_PATH
    attributes("Class-Path": {
		
		def cp = ""
		
		configurations.runtime.each {
			if( it.getName().matches("groovy-.+\\.jar") ) {
				return
			}
			if(cp.length() > 0) cp += ' '
			cp += it.getName()
		}
		
		cp += ( ' ' + jar.archiveName )
		
		return cp
	}.call() )
  }
}

applicationDistribution.from(pathingJar) {
  into "lib"
}

startScripts {
	
  def builtInGroovyJars = []
	
  doFirst {
	
    def inputClasspath = getClasspath()
	  
    def filteredClasspath = inputClasspath.filter {
      if( it.getName().matches("groovy-.+\\.jar") ) {
        builtInGroovyJars.add( it.getName() )
		return false	  
      } else {
        return true
      }
    }
	
	
	setClasspath(filteredClasspath)
	  	    
  }
  
  doLast {
	  
    def winScriptFile  = file getWindowsScript()
    def winFileText = winScriptFile.text
	
	def winGroovyJars = ''
	for(String groovyJar : builtInGroovyJars) {
		
		if(winGroovyJars.length() > 0) {
			winGroovyJars += ';'
		}

		winGroovyJars += "%APP_HOME%\\\\lib\\\\${groovyJar}"
				
	}
	
	//prepare the class path based on GROOVY_JAR_PATH variable
	def winFileGroovyPath = """\
if defined GROOVY_JAR_PATH (
    echo Using GROOVY_JAR_PATH = %GROOVY_JAR_PATH%
) else (
  set GROOVY_JAR_PATH="${winGroovyJars}"
)
"""
    // Remove too-long-classpath and use pathing jar instead
    winFileText = winFileText.replaceAll('set CLASSPATH=.*', 'rem CLASSPATH declaration removed.\n' + winFileGroovyPath)
    winFileText = winFileText.replaceAll('("%JAVA_EXE%" .* -classpath ")%CLASSPATH%(" .*)', '$1%GROOVY_JAR_PATH%;%APP_HOME%\\\\lib\\\\' + pathingJar.archiveName + '$2')

    winScriptFile.text = winFileText
	
	
	
	def unixScriptFile = file getUnixScript()
	def unixFileText = unixScriptFile.text
	
	def unixGroovyJars = ''
	for(String groovyJar : builtInGroovyJars) {
		
		if(unixGroovyJars.length() > 0) {
			unixGroovyJars += ':'
		} 
		
		unixGroovyJars += "\\\$APP_HOME/lib/${groovyJar}"
	}
	
	def unixFileGroovyPath = """\
if [ -n "\\\$GROOVY_JAR_PATH" ] ; then
  echo Using GROOVY_JAR_PATH = \\\$GROOVY_JAR_PATH
else 
  GROOVY_JAR_PATH="${unixGroovyJars}"
fi

"""
	
	unixFileText = unixFileText.replaceAll('(exec "\\$JAVACMD" "\\$\\{JVM_OPTS\\[@\\]\\}" -classpath ")(\\$CLASSPATH" .*)',
			unixFileGroovyPath +
			'$1\\$GROOVY_JAR_PATH:$2')
	unixScriptFile.text = unixFileText
	
  }
}

if (hasProperty('evalPluginDir')) {
  installDist.into new File(evalPluginDir, 'groovy')
}

if (hasProperty('includeDepsInJar')) {
  build.dependsOn jar
  jar {
    // need to remove META-INF/*.SF to use this.
    from {
       (configurations.compile - configurations.provided).collect { it.isDirectory() ? it : zipTree(it).matching{exclude{it.path.contains('META-INF')} } }
    } {
      exclude "META-INF/*.SF"
      exclude "META-INF/*.DSA"
      exclude "META-INF/*.RSA"
      exclude "org/apache/ivy/**"
      exclude "org/apache/commons/math/**"
      exclude "org/apache/commons/math3/**"
      exclude "org/bouncycastle/**"
      exclude "com/lowagie/**"
    }
  }
}
task realclean
realclean.dependsOn(clean)
// should also remove
// GroovyLexer.java GroovyLexer.tokens GroovyParser.java GroovyParser.tokens
// GroovyParserBaseListener.java GroovyParserListener.java
