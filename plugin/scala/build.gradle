/*
 *  Copyright 2014 TWO SIGMA OPEN SOURCE, LLC
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
apply plugin: 'java'
apply plugin: 'scala'

repositories {
  mavenCentral()
}

apply plugin:'application'

mainClassName = 'com.twosigma.beaker.scala.Main'

configurations {
  provided
}

sourceSets.main {
  compileClasspath += configurations.provided
}

dependencies {
  provided project(':plugin:jvm')
  compile group: 'org.scala-lang', name: 'scala-compiler', version: '2.11.8'
  compile group: 'org.scala-lang', name: 'scala-library', version: '2.11.8'
  compile group: 'jline', name: 'jline', version: '2.12'

  compile group: 'org.apache.spark', name: 'spark-core_2.11', version: '1.6.1'
  compile group: 'org.apache.spark', name: 'spark-sql_2.11', version: '1.6.1'
}

compileScala

compileJava {
  options.compilerArgs << '-Xlint:deprecation'
  options.compilerArgs << '-Xlint:unchecked'
}

if (hasProperty('evalPluginDir')) {
  installDist.into new File(evalPluginDir, 'scala')
}

if (hasProperty('includeDepsInJar')) {
  build.dependsOn jar
  jar {
    // need to remove META-INF/*.SF to use this.
    from {
       (configurations.compile - configurations.provided).collect { it.isDirectory() ? it : zipTree(it).matching{exclude{it.path.contains('META-INF')} } }
    } {
      exclude "META-INF/*.SF"
      exclude "META-INF/*.DSA"
      exclude "META-INF/*.RSA"
    }
  }
}

startScripts {
  defaultJvmOpts=['-Djava.awt.headless=' + 'true']
  doLast {
    // Remove too-long-classpath and use wildcard ( works for java 6 and above only)
    windowsScript.text = windowsScript.text.replaceAll('set CLASSPATH=.*', 'set CLASSPATH=.;%APP_HOME%/lib/*;%APP_HOME%/../sharedLibs/*')
    unixScript.text = unixScript.text.replaceAll('CLASSPATH=\\$APP_HOME.*', 'CLASSPATH=\\$APP_HOME/lib/*:\\$APP_HOME/../sharedLibs/*')
  }
}

task realclean
realclean.dependsOn(clean)
