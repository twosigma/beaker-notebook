/*
 *  Copyright 2015 TWO SIGMA OPEN SOURCE, LLC
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

def osName = System.properties['os.name']
def mac = false
def win = false
def linux = false
def platform = ''
def setupName
if (osName.startsWith('Mac')) {
  mac = true
  platform = 'darwin'
  setupName = 'beaker-notebook-' + gitDescribe() + '-electron-mac'
} else if (osName.startsWith('Windows')) {
  win = true
  platform = 'win32'
  setupName = 'beaker-notebook-' + gitDescribe() + '-electron-windows'
} else if (osName.startsWith('Linux')) {
  linux = true
  platform = 'linux'
  setupName = 'beaker-notebook-' + gitDescribe() + '-electron-ubuntu'
}

def gitDescribe() {
  def name = "git describe --all --long".execute().text.trim()
  if (name.startsWith('heads/')) {
    name = name.substring(6)
  }
  name=name.replace("/", "-")
  return name
}


def electronName = ''
electronName = 'electron-v' + version + '-' + platform + '-' + arch
def dmgName = 'beaker-notebook-' + gitDescribe() + '-electron-mac.dmg'

import org.apache.tools.ant.filters.ReplaceTokens
task processTemplates(type: Copy, dependsOn: ['cleanIss']) {
  from 'templates/makeWinInstaller.template'
  into 'templates'
  rename { String fileName ->
    "makeWinInstaller.iss"
  }
  filter(ReplaceTokens, tokens: [MyAppVersion: gitDescribe()])
}

task cleanIss(type: Delete) {
  delete  "./templates/makeWinInstaller.iss"
}

//use xcopy to avoid problem: https://discuss.gradle.org/t/under-windows-gradle-1-11-build-fails-trying-to-generate-file-hashes-related-to-gradle-2967/1752
task copyIss(type: Exec, dependsOn: ['processTemplates']) {
  commandLine 'xcopy', "/Y", '.\\templates\\makeWinInstaller.iss', '.'
}
copyIss.onlyIf { win }

task cleanElectron(type: Delete) {
  delete 'dist', 'Beaker.app', '__MACOSX', 'jre', 'beaker', 'osxdmg',
          fileTree(dir: './', include: "beaker-notebook-*-electron-mac.dmg"),
          fileTree(dir: './', include: "beaker-notebook-*-electron-windows.exe"),
          fileTree(dir: './', include: "beaker-notebook-*-electron-*.zip"),
          'python',
          setupName + '.exe',
          "./templates/makeWinInstaller.iss"
}

task realCleanElectron(type: Delete, dependsOn: 'cleanElectron') {
  delete 'app/node_modules', fileTree(dir: './', include: "electron*.zip")
}

task makeInstaller(type: Exec, dependsOn: ['realCleanElectron', 'makeBundle', 'makeOSXDMG', 'copyIss']) {
  if (mac) {
    delete dmgName
    commandLine './create-dmg/create-dmg', '--volname', 'Beaker', '--window-pos', '200', '120', '--window-size', '800', '400', '--icon-size', '100', '--icon', 'Beaker.app', '200', '190', '--hide-extension', 'Beaker.app', '--app-drop-link', '600', '185', dmgName, 'osxdmg/'
  } else if (win) {
    commandLine 'iscc', '/o./', '/f'+setupName, 'makeWinInstaller.iss'
  }else{
    commandLine 'gradle', 'zipElectron'
  }
}
makeInstaller.mustRunAfter realCleanElectron

task createBundle(dependsOn: ['nodeInstall', 'copyBeakerApp', 'copyDist', 'copyJRE', 'copyTools', 'macCopyElectron', 'copyPList', 'copyIcons', 'winChangeDetails', 'linuxRename', 'linuxDepScript']) {
}

task makeBundle(dependsOn: ['realCleanElectron', 'createBundle', 'checkIdentity', 'signBundle']) {
}
makeBundle.mustRunAfter realCleanElectron

task makePortableZip(dependsOn: ['makeBundle']) {
  doFirst {
    copy {
      from '../../core/beaker.portable.command.bat'
      into './beaker/resources/dist/'
      rename { String fileName ->
        "beaker.command.bat"
      }
    }
  }
  doLast {
    zipElectron.execute()
  }
}
makePortableZip.onlyIf { win }

task zipElectron (type: Zip) {
  from fileTree('beaker')
  archiveName = setupName + ".zip"
}
zipElectron.onlyIf { win || linux}


task runElectron(type: Exec, dependsOn: ['unzipJRE', 'unzipPython', 'nodeInstall', 'makeDist']) {
  if (win) {
    commandLine 'cmd', '/c', 'electron', '--disable-http-cache', 'app'
  } else {
    commandLine 'electron', '--disable-http-cache', 'app'
  }
}

task makeDist (dependsOn:[':beaker:build', 'unzipPython']) << {
  copy {
    from '../../core/config'
    into './dist/config'
  }
  copy {
    from '../../core/src/main/web'
    into './dist/src/main/web'
  }
  copy {
    from '../../core/build/install/core'
    into './dist/build/install/core'
  }
  copy {
    from '../../core/LICENSE'
    into './dist/'
  }
  if (mac || linux) {
    copy {
      from '../../core/beaker.command'
      into './dist/'
    }
  }
  else if (win) {
    copy {
      from '../../core/beaker.command.bat'
      into './dist/'
    }
    copy {
      from './python'
      into './dist/python'
    }
  }
}

// Global tasks
task installElectron(type: Exec) {
  if (win) {
    commandLine 'cmd', '/c', 'npm', 'install', 'electron-prebuilt', '-g'
  }
  else  if (mac) {
    commandLine 'npm', 'install', 'electron-prebuilt', '-g'
  }
  else if (linux) {
    commandLine 'sudo', 'npm', 'install', 'electron-prebuilt', '-g'
  }
}

task nodeInstall(type: Exec) {
  if (win) {
    commandLine 'cmd', '/c', 'npm', '--prefix', './app', 'install', './app'
  } else {
    commandLine 'npm', '--prefix', './app', 'install', './app'
  }
}

task unzipJRE(type: Exec) {
  commandLine 'unzip', '-uo', 'jre.zip'
}

task downloadElectron(type: Exec) {
  if (win) {
    def url = '\\"https://github.com/atom/electron/releases/download/v' + version + '/' + electronName + '.zip\\"'
    def fileName = '\\"' + electronName + '.zip\\"'
    commandLine 'PowerShell', "(New-Object System.Net.WebClient).DownloadFile(" + url + ", " + fileName + ")"
  } else {
    outputs.file('./' + electronName + '.zip')
    commandLine 'curl', '-LO', 'https://github.com/atom/electron/releases/download/v' + version + '/' + electronName + '.zip'
  }
}

downloadElectron.onlyIf { !file(electronName + '.zip').exists() }

task unzipElectron(type: Exec, dependsOn: ['downloadElectron']) {
  commandLine 'unzip', '-uo', '-d', 'beaker', electronName
}

task copyBeakerApp(type: Copy, dependsOn: 'nodeInstall') {
  from 'app'
  if (mac) {
    dependsOn 'macCopyElectron'
    into 'Beaker.app/Contents/Resources/app'
  } else if (win || linux) {
    dependsOn 'unzipElectron'
    into 'beaker/resources/app'
  }
}

task copyDist(type: Copy, dependsOn: ['makeDist']) {
  from 'dist'
  if (mac) {
    dependsOn 'macCopyElectron'
    into 'Beaker.app/Contents/Resources/dist'
  } else if (win || linux) {
    into 'beaker/resources/dist'
  }
}

task copyJRE(type: Copy, dependsOn: ['unzipJRE']) {
  from 'jre'
  if (mac) {
    dependsOn 'macCopyElectron'
    into 'Beaker.app/Contents/Resources/jdk'
  } else if (win || linux) {
    into 'beaker/resources/jdk'
  }
}

task copyTools(type: Copy, dependsOn: 'copyJRE') {
  from 'tools.jar'
  if (mac) {
    into 'Beaker.app/Contents/Resources/jdk/Contents/Home/lib'
  } else if (win || linux) {
    into 'beaker/resources/jdk/lib'
  }
}

// OSX build
task signBundle (type: Exec, dependsOn: ['createBundle', 'checkIdentity']) {
  commandLine 'codesign', '--deep', '--force', '--verbose', '--sign', "Developer ID Application: Two Sigma Open Source LLC.", 'Beaker.app'
}
signBundle.onlyIf { mac }

task checkIdentity(type: Exec, dependsOn: 'createBundle') {
  ignoreExitValue = true
  standardOutput = new ByteArrayOutputStream()
  errorOutput = standardOutput
  commandLine 'codesign', '--sign', "Two Sigma Open Source LLC."
  doLast {
    // Identity valid
    if (execResult.exitValue != 2) {
      println 'Two Sigma Identity not found. Unsigned Beaker.app still produced'
      signBundle.enabled = false
    }
  }
}
checkIdentity.onlyIf { mac }

task macCopyElectron(type: Exec, dependsOn: ['unzipElectron']) {
  commandLine 'rsync', '-a', 'beaker/Electron.app/', 'Beaker.app'
}
macCopyElectron.onlyIf { mac }

task makeOSXDMG(dependsOn: 'makeBundle') << {
  delete 'osxdmg'
  ant.move(file: 'Beaker.app', tofile: 'osxdmg/Beaker.app')
}
makeOSXDMG.onlyIf { mac }

task removePList(type: Delete, dependsOn: 'macCopyElectron') {
  delete 'Beaker.app/Contents/Info.plist', 'Beaker.app/Contents/Resources/atom.icns'
}
removePList.onlyIf { mac }

task copyPList(type: Copy, dependsOn: ['macCopyElectron', 'removePList']) {
  from 'Info.plist'
  into 'Beaker.app/Contents'
}
copyPList.onlyIf { mac }

task copyIcons (dependsOn: 'macCopyElectron') << {
  copy {
    from 'beaker.icns'
    into 'Beaker.app/Contents/Resources'
  }
  copy {
    from 'bkrfiles.icns'
    into 'Beaker.app/Contents/Resources'
  }
}
copyIcons.onlyIf { mac }

// Windows build
task unzipPython(type: Exec) {
  commandLine 'unzip', '-uo', 'python.zip'
}
unzipPython.onlyIf { win }


task winRename(dependsOn: ['unzipElectron']) {
    doFirst {
        file("beaker/electron.exe").renameTo(file("beaker/beaker.exe"))
    }
    doLast {
        delete("beaker/electron.exe")
    }
}
winRename.onlyIf{ win }

task linuxRename(dependsOn: ['unzipElectron']) {
     doFirst {
        file("beaker/electron").renameTo(file("beaker/beaker"))
    }
    doLast {
        delete("beaker/electron")
    }
}
linuxRename.onlyIf{ linux }

task winChangeDetails(dependsOn: ['winRename'
        , 'winChangeIcon'
        , 'winChangeProductName'
        , 'winChangeFileDescription'
        , 'winChangeOriginalFilename'
        , 'winChangeLegalCopyright'
        , 'winChangeProductVersion'
    ]) {
}
winChangeDetails.onlyIf{ win }

task winChangeIcon(type: Exec, dependsOn: ['winRename']) {
        commandLine './rcedit.exe', 'beaker/beaker.exe', '--set-icon', 'beaker.ico'
     }
winChangeIcon.onlyIf{ win }
task winChangeProductName(type: Exec, dependsOn: ['winRename']) {
        commandLine './rcedit.exe', 'beaker/beaker.exe', '--set-version-string', "ProductName", "Beaker"
}
winChangeProductName.onlyIf{ win }
task winChangeFileDescription(type: Exec, dependsOn: ['winRename']) {
        commandLine './rcedit.exe', 'beaker/beaker.exe', '--set-version-string', "FileDescription", "Beaker"
}
winChangeFileDescription.onlyIf{ win }
task winChangeOriginalFilename(type: Exec, dependsOn: ['winRename']) {
        commandLine './rcedit.exe', 'beaker/beaker.exe', '--set-version-string', "OriginalFilename", "beaker.exe"
}
winChangeOriginalFilename.onlyIf{ win }
task winChangeLegalCopyright(type: Exec, dependsOn: ['winRename']) {
        commandLine './rcedit.exe', 'beaker/beaker.exe', '--set-version-string', "LegalCopyright", "Copyright 2015 TWO SIGMA OPEN SOURCE, LLC"
}
winChangeLegalCopyright.onlyIf{ win }
task winChangeProductVersion(type: Exec, dependsOn: ['winRename']) {
        commandLine './rcedit.exe', 'beaker/beaker.exe', '--set-version-string', "ProductVersion", gitDescribe()
}
winChangeProductVersion.onlyIf{ win }

// Linux build
task linuxDepScript(type: Copy, dependsOn: 'copyDist') {
  from '../ubuntu/install-dependencies.sh'
  into 'beaker/resources/dist/'
}
linuxDepScript.onlyIf { linux }
