/*
 *  Copyright 2014 TWO SIGMA OPEN SOURCE, LLC
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
apply plugin:'java'

apply plugin:'application'
mainClassName = 'com.twosigma.beaker.core.Main'

def windows() {
  return System.getProperty('os.name').contains('Windows')
}
def mac() {
  return System.getProperty('os.name').contains('Mac')
}
def winOrUnix(Object... args) {
  if (windows()) {
    return (['cmd', '/c'] << args).flatten()
  }
  else {
    return args
  }
}

def collectPlugins(String path) {
  def plugins = [];
  def tree = fileTree(path){
    include  '**/dist/**/*.js'
    exclude '**/dist/app/**'
    exclude '**/dist/vendor/**'
    exclude '**/node_modules/**'
  };
  tree.visit { element ->
    if (!element.isDirectory())
      plugins << element.file
  }
  return plugins;
}

def getPluginKeyValue(line){
  def start = line.indexOf('"')
  def end = line.lastIndexOf('"')
  if (start == -1 && end == -1){
    start = line.indexOf("'")
    end = line.lastIndexOf("'")
  }
  if (start != -1 && end != -1)
    return line.substring(start + 1, end);
  return ''
}

def generatePluginDescriptions(){
  def pluginDescriptions = '';
  def pluginKeys = [
    "bgColor",
    "fgColor",
    "borderColor",
    "shortName",
    "cmMode",
    "tooltip"
  ]
  def plugins = collectPlugins('../plugin')
  plugins.each { file ->
    def map = [:]
    def lines = file.readLines();
    lines.each { String line ->
      if (line.contains("var PLUGIN_NAME = ")){
        map['pluginName'] = getPluginKeyValue(line);
      }else if (line.contains('var COMMAND = ')){
        def command = getPluginKeyValue(line);
        map['url'] = "./plugins/eval/"+ command.substring(0, command.lastIndexOf('/')+1)+file.name;
      }
      else{
        pluginKeys.each { String key ->
          if (line.contains(key)) {
            map[key] = getPluginKeyValue(line);
          }
        }
      }
    }
    def pluginDescription = String.format("\"%s\": { url : \"%s\", bgColor: \"%s\", fgColor: \"%s\", borderColor: \"%s\", shortName: \"%s\", cmMode: \"%s\", tooltip: \"%s\" },\n"
      , map['pluginName']
      , map['url']
      , map['bgColor']
      , map['fgColor']
      , map['borderColor']
      , map['shortName']
      , map['cmMode']
      , map['tooltip'])
    pluginDescriptions += pluginDescription;
  }
  return pluginDescriptions;
}

repositories {
  mavenCentral()
}

dependencies {
  compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
  compile group: 'com.sun.jersey', name: 'jersey-servlet', version: '1.17.1'
  compile group: 'com.sun.jersey', name: 'jersey-server', version: '1.17.1'
  compile group: 'com.sun.jersey', name: 'jersey-core', version: '1.17.1'
  compile group: 'commons-cli', name: 'commons-cli', version: '1.2'
  compile group: 'org.apache.httpcomponents', name: 'fluent-hc', version: '4.5.1'
  compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.3.8.v20160314'
  compile group: 'org.eclipse.jetty.websocket', name: 'websocket-server', version: '9.3.8.v20160314'
  compile group: 'org.eclipse.jetty.websocket', name: 'websocket-client', version: '9.3.8.v20160314'
  compile group: 'org.eclipse.jetty.websocket', name: 'javax-websocket-server-impl', version: '9.3.8.v20160314'
  compile group: 'org.eclipse.jetty', name: 'jetty-util', version: '9.3.8.v20160314'
  compile group: 'org.eclipse.jetty', name: 'jetty-util-ajax', version: '9.3.8.v20160314'
  compile group: 'org.jvnet.winp', name: 'winp', version: '1.18'
  compile group: 'org.samba.jcifs', name: 'jcifs', version: '1.3.3'
  runtime group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.6'

  compile group: 'org.json', name: 'json', version: '20090211'
  compile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.1'
  compile group: 'commons-io', name: 'commons-io', version: '2.4'

  compile project(':shared')
}


task (npmInstall, type: Exec) {
  commandLine(*(winOrUnix('npm', 'install')))
}

task (bowerInstall, type: Exec) {
  if (windows()) {
    commandLine 'cmd', '/c', 'bower', 'install'
  } else {
    commandLine './node_modules/bower/bin/bower', 'install'
  }
}

task (publishAssets, type: Copy) {
  from 'src/main/web/app/dist/'
  into '../embeddable_assets/'
  include '*js'
  include 'beaker-sandbox.css'
}

task (copyDTImages, type: Copy) {
	from 'src/main/web/vendor/bower_components/datatables/media/images/'
	into 'src/main/web/app/images/'
}
task (copyAwesomeFonts, type: Copy) {
    from 'src/main/web/vendor/bower_components/font-awesome/fonts/'
	into 'src/main/web/app/fonts/'
}
task (copyBootStrapFonts, type: Copy) {
	from 'src/main/web/vendor/bower_components/bootstrap-sass/assets/fonts/bootstrap/'
	into 'src/main/web/app/fonts/'
}

task copyStuff
copyStuff.dependsOn copyDTImages
copyStuff.dependsOn copyAwesomeFonts
copyStuff.dependsOn copyBootStrapFonts

task updatePackages

task (copyKatex, type: Copy) {
	inputs.dir 'src/main/web/vendor/bower_components/katex/'
	outputs.dir 'src/main/web/app/vendor/katex/'
	from 'src/main/web/vendor/bower_components/katex/'
	into 'src/main/web/app/vendor/katex/'
	exclude '**.json'
}

task (copyRequireJS, type: Copy) {
	from 'src/main/web/vendor/requirejs/'
	into 'src/main/web/app/vendor/requirejs/'
}

task (copyGGVis, type: Copy) {
	from 'src/main/web/vendor/ggvis/'
	into 'src/main/web/app/vendor/ggvis/'
}

task copyDiagrammer << {
  copy {
    from 'src/main/web/vendor/diagrammer/'
    into 'src/main/web/app/vendor/diagrammer/'
  }
  copy {
    from 'src/main/web/vendor/bower_components/d3/'
    into 'src/main/web/app/vendor/bower_components/d3/'
    include '**.min.js'
  }
  copy {
    from 'src/main/web/vendor/bower_components/vis/dist/'
    into 'src/main/web/app/vendor/bower_components/vis/'
    include '**.min.js'
    include '**.min.css'

  }
  copy {
    from 'src/main/web/vendor/bower_components/vivagraphjs/dist/'
    into 'src/main/web/app/vendor/bower_components/vivagraphjs/'
    include '**.min.js'
  }
}

task copyPlotly << {
  copy {
    from 'src/main/web/vendor/plotly/'
    into 'src/main/web/app/vendor/plotly/'
  }
  copy {
    from 'src/main/web/vendor/htmlwidgets/'
    into 'src/main/web/app/vendor/htmlwidgets/'
  }
}

task (copyJQueryUIImages, type: Copy) {
    from 'src/main/web/vendor/jquery-ui/css/smoothness/images/'
    into 'src/main/web/app/dist/images/'
}

task (copyElFinderImages, type: Copy) {
  from 'src/main/web/vendor/bower_components/elfinder/img/'
  into 'src/main/web/app/img/'
}

import org.apache.tools.ant.filters.ReplaceTokens
task addevalplugins(dependsOn: []) {
  doLast {
    copy {
      from 'templates/addevalplugins.template'
      into '.'
      rename { String fileName ->
        "src/main/web/app/genweb/addevalplugins.js"
      }
      filter(ReplaceTokens, tokens: [pluginDescriptions: generatePluginDescriptions()])
    }
  }
}


task copyVendorStuff
copyVendorStuff.dependsOn copyKatex
copyVendorStuff.dependsOn copyRequireJS
copyVendorStuff.dependsOn copyJQueryUIImages
copyVendorStuff.dependsOn copyElFinderImages
copyVendorStuff.dependsOn copyGGVis
copyVendorStuff.dependsOn copyDiagrammer
copyVendorStuff.dependsOn copyPlotly
copyVendorStuff.dependsOn addevalplugins

task (compileAssets, type: Exec) {
  commandLine(*(winOrUnix('npm', 'run-script', 'compile')))
}

task (compileAssetsDebug, type: Exec) {
  commandLine(*(winOrUnix('npm', 'run-script', 'compile', '--', '--debug')))
}

task (compileAssetsEmbed, type: Exec) {
  if (windows()) {
    commandLine 'cmd', '/c', 'npm', 'run-script', 'compile', '--', '--embed'
  } else {
    commandLine 'npm', 'run-script', 'compile', '--', '--embed'
  }
}

task doRemove() {
  doLast {
      delete fileTree(dir: "build/scripts")
      delete "build/scripts"
      delete fileTree(dir: "node_modules")
      delete "node_modules"
      delete fileTree(dir: "src/main/web/app/genweb")
      delete "src/main/web/app/genweb"
      delete fileTree(dir: "src/main/web/app/dist")
      delete "src/main/web/app/dist"
      delete fileTree(dir: "src/main/web/app/vendor") // why does this exist? XXX
      delete "src/main/web/app/vendor"
      delete fileTree(dir: "config/plugins")
      delete "config/plugins"
      delete "src/main/web/plugin/init/addoutputdisplays.js"
      delete "config/build_time"
      delete "config/hash"
      delete "config/version"
  }
}

task deleteTemp() {
  doLast {
    delete fileTree(dir: "src/main/web/app/genweb")
    delete "src/main/web/app/genweb"
  }
}

task builddebug
task debug
task runembed
task buildembed
task realclean

realclean.dependsOn doRemove
bowerInstall.dependsOn npmInstall
compileAssets.dependsOn npmInstall
compileAssetsEmbed.dependsOn npmInstall
compileAssetsEmbed.dependsOn compileAssets // not ideal, but htmlbuild creates manifests
compileAssetsDebug.dependsOn npmInstall
updatePackages.dependsOn bowerInstall
updatePackages.dependsOn copyStuff
copyStuff.mustRunAfter bowerInstall
build.dependsOn compileAssets
buildembed.dependsOn compileAssetsEmbed
publishAssets.dependsOn buildembed
builddebug.dependsOn compileAssetsDebug
run.dependsOn build
run.dependsOn jar
run.dependsOn copyVendorStuff
debug.dependsOn builddebug
debug.dependsOn jar
debug.dependsOn copyVendorStuff
runembed.dependsOn buildembed
runembed.dependsOn jar
runembed.dependsOn copyVendorStuff
clean.dependsOn deleteTemp

startScripts {
  defaultJvmOpts=['-Djava.awt.headless=' + 'true']
  doLast {
    // Remove too-long-classpath and use wildcard ( works for java 6 and above only)
    windowsScript.text = windowsScript.text.replaceAll('set CLASSPATH=.*', 'set CLASSPATH=.;%APP_HOME%/lib/*')
  }
}

compileJava {
  options.compilerArgs << '-Xlint:deprecation'
  options.compilerArgs << '-Xlint:unchecked'
}

if (hasProperty('inTesting')) {
  run {
    args '--disable-kerberos', '--default-notebook', 'config/default-test.bkr'
  }
}

if (hasProperty('includeDepsInJar')) {
  build.dependsOn jar
  jar {
    // need to remove META-INF/*.SF to use this.
    from {
       configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    } {
      exclude "META-INF/*.SF"
      exclude "org/eclipse/jetty/**"
      exclude "org/cometd/**"
      exclude "org/apache/ivy/**"
      exclude "org/apache/httpcomponents/**"
      exclude "org/apache/http/**"
      exclude "javax/annotation/**"
      exclude "com/sun/xml/**"
      exclude "com/sun/istack/**"
    }
  }
}
