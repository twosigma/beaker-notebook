/*
 *  Copyright 2014 TWO SIGMA OPEN SOURCE, LLC
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
apply plugin:'java'

apply plugin:'application'
mainClassName = 'com.twosigma.beaker.core.Main'

sourceCompatibility = javaSourceVersion
targetCompatibility = javaTargetVersion

def windows() {
  return System.getProperty('os.name').contains('Windows')
}
def mac() {
  return System.getProperty('os.name').contains('Mac')
}
def winOrUnix(Object... args) {
  if (windows()) {
    return (['cmd', '/c'] << args).flatten()
  }
  else {
    return args
  }
}

repositories {
  mavenCentral()
}

dependencies {
  compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
  compile group: 'com.sun.jersey', name: 'jersey-servlet', version: '1.17.1'
  compile group: 'com.sun.jersey', name: 'jersey-server', version: '1.17.1'
  compile group: 'com.sun.jersey', name: 'jersey-core', version: '1.17.1'
  compile group: 'commons-cli', name: 'commons-cli', version: '1.2'
  compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.3'
  compile group: 'org.apache.httpcomponents', name: 'fluent-hc', version: '4.3.1'
  compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '8.1.13.v20130916'
  compile group: 'org.jvnet.winp', name: 'winp', version: '1.18'
  compile group: 'org.samba.jcifs', name: 'jcifs', version: '1.3.3'
  runtime group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.6'
  compile project(':shared')
}


task (npmInstall, type: Exec) {
  commandLine(*(winOrUnix('npm', 'install')))
}

task (bowerInstall, type: Exec) {
  if (windows()) {
    commandLine 'cmd', '/c', 'bower', 'install'
  } else {
    commandLine './node_modules/bower/bin/bower', 'install'
  }
}

task (publishAssets, type: Copy) {
  from 'src/main/web/app/dist/'
  into '../embeddable_assets/'
  include '*js'
  include 'beaker-sandbox.css'
}

task (copyDTImages, type: Copy) {
	from 'src/main/web/vendor/bower_components/datatables/media/images/'
	into 'src/main/web/app/images/'
}
task (copyAwesomeFonts, type: Copy) {
    from 'src/main/web/vendor/bower_components/font-awesome/fonts/'
	into 'src/main/web/app/fonts/'
}
task (copyBootStrapFonts, type: Copy) {
	from 'src/main/web/vendor/bower_components/bootstrap-sass/assets/fonts/bootstrap/'
	into 'src/main/web/app/fonts/'
}

task copyStuff
copyStuff.dependsOn copyDTImages
copyStuff.dependsOn copyAwesomeFonts
copyStuff.dependsOn copyBootStrapFonts

task updatePackages

task (copyKatex, type: Copy) {
	inputs.dir 'src/main/web/vendor/bower_components/katex-build/'
	outputs.dir 'src/main/web/app/vendor/katex-build/'
	from 'src/main/web/vendor/bower_components/katex-build/'
	into 'src/main/web/app/vendor/katex-build/'
	exclude '**.json'
}

task (copyRequireJS, type: Copy) {
	from 'src/main/web/vendor/requirejs/'
	into 'src/main/web/app/vendor/requirejs/'
}

task (copyJQueryUIImages, type: Copy) {
    from 'src/main/web/vendor/jquery-ui/css/smoothness/images/'
    into 'src/main/web/app/dist/images/'
}

task copyVendorStuff
copyVendorStuff.dependsOn copyKatex
copyVendorStuff.dependsOn copyRequireJS
copyVendorStuff.dependsOn copyJQueryUIImages

task (compileAssets, type: Exec) {
  commandLine(*(winOrUnix('npm', 'run-script', 'compile')))
}

task (compileAssetsDebug, type: Exec) {
  commandLine(*(winOrUnix('npm', 'run-script', 'compile', '--', '--debug')))
}

task (compileAssetsEmbed, type: Exec) {
  if (windows()) {
    commandLine 'cmd', '/c', 'npm', 'run-script', 'compile', '--', '--embed'
  } else {
    commandLine 'npm', 'run-script', 'compile', '--', '--embed'
  }
}

task (copyNginx, type: Exec) {
  if (mac()) {
//  def brewLocation = 'which brew'.execute().text[0..-10] // use nginx from current machine
    def brewLocation = '../launcher/mac/nginx/' // use nginx from old mac
    commandLine 'cp', '-f',
      brewLocation + 'lib/libpcre.1.dylib',
      brewLocation + 'bin/nginx',
      brewLocation + 'opt/openssl/lib/libssl.1.0.0.dylib',
      brewLocation + 'opt/openssl/lib/libcrypto.1.0.0.dylib',
      brewLocation + 'etc/nginx/mime.types',
      'nginx/bin'
  } else if (windows()) {
    def nginxLocation = 'cmd /c where nginx'.execute().text.trim()
    commandLine 'cmd', '/c', 'xcopy', '/Y', '/Q', nginxLocation, 'nginx\\bin', '&', 'xcopy', '/Y', '/Q', nginxLocation + '\\..\\conf\\mime.types', 'nginx\\bin'
  }
}

task doRemove() {
  doLast {
      delete fileTree(dir: "node_modules")
      delete "node_modules"
      delete fileTree(dir: "src/main/web/app/temp")
      delete "src/main/web/app/temp"
      delete fileTree(dir: "src/main/web/app/dist")
      delete "src/main/web/app/dist"
      delete fileTree(dir: "src/main/web/app/vendor") // why does this exist? XXX
      delete "src/main/web/app/vendor"
      delete fileTree(dir: "config/plugins")
      delete "config/plugins"
      delete "src/main/web/plugin/init/addoutputdisplays.js"
      delete "config/build_time"
      delete "config/hash"
      delete "config/version"
  }
}

task builddebug
task debug
task runembed
task buildembed
task realclean

realclean.dependsOn doRemove
bowerInstall.dependsOn npmInstall
compileAssets.dependsOn npmInstall
compileAssetsEmbed.dependsOn npmInstall
compileAssetsEmbed.dependsOn compileAssets // not ideal, but htmlbuild creates manifests
compileAssetsDebug.dependsOn npmInstall
updatePackages.dependsOn bowerInstall
updatePackages.dependsOn copyStuff
copyStuff.mustRunAfter bowerInstall
build.dependsOn compileAssets
buildembed.dependsOn compileAssetsEmbed
publishAssets.dependsOn buildembed
builddebug.dependsOn compileAssetsDebug
run.dependsOn build
run.dependsOn jar
run.dependsOn copyVendorStuff
debug.dependsOn builddebug
debug.dependsOn jar
debug.dependsOn copyVendorStuff
runembed.dependsOn buildembed
runembed.dependsOn jar
runembed.dependsOn copyVendorStuff

if (mac() || windows()) {
  build.dependsOn copyNginx
  buildembed.dependsOn copyNginx
  builddebug.dependsOn copyNginx
  run.dependsOn copyNginx
  startScripts {
    defaultJvmOpts=['-Dbeaker.nginx.bin.dir=' + './nginx/bin']
  }
}

compileJava {
  options.compilerArgs << '-Xlint:deprecation'
  options.compilerArgs << '-Xlint:unchecked'
}

if (hasProperty('inTesting')) {
  run {
    args '--disable-kerberos', '--default-notebook', 'config/default-test.bkr'
  }
}

if (hasProperty('includeDepsInJar')) {
  build.dependsOn jar
  jar {
    // need to remove META-INF/*.SF to use this.
    from {
       configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    } {
      exclude "META-INF/*.SF"
      exclude "org/eclipse/jetty/**"
      exclude "org/cometd/**"
      exclude "org/apache/ivy/**"
      exclude "org/apache/httpcomponents/**"
      exclude "org/apache/http/**"
      exclude "javax/annotation/**"
      exclude "com/sun/xml/**"
      exclude "com/sun/istack/**"
    }
  }
}
