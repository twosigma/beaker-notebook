{
    "beaker": "2",
    "evaluators": [
        {
            "name": "HTML",
            "plugin": "HTML",
            "view": {
                "cm": {
                    "mode": "htmlmixed"
                }
            }
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            }
        }
    ],
    "cells": [
        {
            "id": "sectionV5vtQ3",
            "type": "section",
            "title": "Swimlane Chart using d3.js",
            "level": 1,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "markdownYoJliC",
            "type": "markdown",
            "body": [
                "Swimlane Chart <br/>",
                "Example from http://bl.ocks.org/bunkat/1962173"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codekzLtXr",
            "type": "code",
            "evaluator": "HTML",
            "input": {
                "body": [
                    "<style>",
                    "  ",
                    ".chart {",
                    "\tshape-rendering: crispEdges;",
                    "}",
                    "",
                    ".mini text {",
                    "\tfont: 9px sans-serif;\t",
                    "}",
                    "",
                    ".main text {",
                    "\tfont: 12px sans-serif;\t",
                    "}",
                    "",
                    ".month text {",
                    "\ttext-anchor: start;",
                    "}",
                    "",
                    ".todayLine {",
                    "\tstroke: blue;",
                    "\tstroke-width: 1.5;",
                    "}",
                    "",
                    ".axis line, .axis path {",
                    "\tstroke: black;",
                    "}",
                    "",
                    ".miniItem {",
                    "\tstroke-width: 6;\t",
                    "}",
                    "",
                    ".future {",
                    "\tstroke: gray;",
                    "\tfill: #ddd;",
                    "}",
                    "",
                    ".past {",
                    "\tstroke: green;",
                    "\tfill: lightgreen;",
                    "}",
                    "",
                    ".brush .extent {",
                    "\tstroke: gray;",
                    "\tfill: blue;",
                    "\tfill-opacity: .165;",
                    "}",
                    "",
                    "</style>",
                    "<div id=\"chart\"/>"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "BeakerDisplay",
                    "innertype": "Html",
                    "object": "<script>\nvar beaker = bkHelper.getBeakerObject().beakerObj;\n</script>\n<style>\n  \n.chart {\n\tshape-rendering: crispEdges;\n}\n\n.mini text {\n\tfont: 9px sans-serif;\t\n}\n\n.main text {\n\tfont: 12px sans-serif;\t\n}\n\n.month text {\n\ttext-anchor: start;\n}\n\n.todayLine {\n\tstroke: blue;\n\tstroke-width: 1.5;\n}\n\n.axis line, .axis path {\n\tstroke: black;\n}\n\n.miniItem {\n\tstroke-width: 6;\t\n}\n\n.future {\n\tstroke: gray;\n\tfill: #ddd;\n}\n\n.past {\n\tstroke: green;\n\tfill: lightgreen;\n}\n\n.brush .extent {\n\tstroke: gray;\n\tfill: blue;\n\tfill-opacity: .165;\n}\n\n</style>\n<div id=\"chart\"><svg width=\"960\" height=\"500\" class=\"chart\"><defs><clipPath id=\"clip\"><rect width=\"885\" height=\"305\"></rect></clipPath></defs><g transform=\"translate(60,20)\" width=\"885\" height=\"305\" class=\"main\"><g><line x1=\"0\" y1=\"0.5\" x2=\"885\" y2=\"0.5\" stroke=\"lightgray\"></line><line x1=\"0\" y1=\"61.5\" x2=\"885\" y2=\"61.5\" stroke=\"lightgray\"></line><line x1=\"0\" y1=\"122.5\" x2=\"885\" y2=\"122.5\" stroke=\"lightgray\"></line><line x1=\"0\" y1=\"183.5\" x2=\"885\" y2=\"183.5\" stroke=\"lightgray\"></line><line x1=\"0\" y1=\"244.5\" x2=\"885\" y2=\"244.5\" stroke=\"lightgray\"></line></g><g><text x=\"-10\" y=\"30.5\" dy=\"0.5ex\" text-anchor=\"end\" class=\"laneText\">lane 0</text><text x=\"-10\" y=\"91.50000000000001\" dy=\"0.5ex\" text-anchor=\"end\" class=\"laneText\">lane 1</text><text x=\"-10\" y=\"152.5\" dy=\"0.5ex\" text-anchor=\"end\" class=\"laneText\">lane 2</text><text x=\"-10\" y=\"213.50000000000003\" dy=\"0.5ex\" text-anchor=\"end\" class=\"laneText\">lane 3</text><text x=\"-10\" y=\"274.5\" dy=\"0.5ex\" text-anchor=\"end\" class=\"laneText\">lane 4</text></g><g transform=\"translate(0,305)\" class=\"main axis date\"><g class=\"tick\" transform=\"translate(612.6923076923076,0)\" style=\"opacity: 1;\"><line y2=\"6\" x2=\"0\"></line><text y=\"9\" x=\"0\" dy=\".71em\" style=\"text-anchor: middle;\">Mon 19</text></g><g class=\"tick\" transform=\"translate(850.9615384615385,0)\" style=\"opacity: 1;\"><line y2=\"6\" x2=\"0\"></line><text y=\"9\" x=\"0\" dy=\".71em\" style=\"text-anchor: middle;\">Mon 26</text></g><g class=\"tick\" transform=\"translate(136.15384615384616,0)\" style=\"opacity: 1;\"><line y2=\"6\" x2=\"0\"></line><text y=\"9\" x=\"0\" dy=\".71em\" style=\"text-anchor: middle;\">Mon 05</text></g><g class=\"tick\" transform=\"translate(374.4230769230769,0)\" style=\"opacity: 1;\"><line y2=\"6\" x2=\"0\"></line><text y=\"9\" x=\"0\" dy=\".71em\" style=\"text-anchor: middle;\">Mon 12</text></g><path class=\"domain\" d=\"M0,0V0H885V0\"></path></g><g transform=\"translate(0,0.5)\" class=\"main axis month\"><g class=\"tick\" transform=\"translate(612.6923076923076,0)\" style=\"opacity: 1;\"><line y2=\"-15\" x2=\"0\"></line><text y=\"-18\" x=\"0\" dy=\"12\" dx=\"5\" style=\"text-anchor: middle;\">Mar - Week 12</text></g><g class=\"tick\" transform=\"translate(850.9615384615385,0)\" style=\"opacity: 1;\"><line y2=\"-15\" x2=\"0\"></line><text y=\"-18\" x=\"0\" dy=\"12\" dx=\"5\" style=\"text-anchor: middle;\">Mar - Week 13</text></g><g class=\"tick\" transform=\"translate(136.15384615384616,0)\" style=\"opacity: 1;\"><line y2=\"-15\" x2=\"0\"></line><text y=\"-18\" x=\"0\" dy=\"12\" dx=\"5\" style=\"text-anchor: middle;\">Mar - Week 10</text></g><g class=\"tick\" transform=\"translate(374.4230769230769,0)\" style=\"opacity: 1;\"><line y2=\"-15\" x2=\"0\"></line><text y=\"-18\" x=\"0\" dy=\"12\" dx=\"5\" style=\"text-anchor: middle;\">Mar - Week 11</text></g><path class=\"domain\" d=\"M0,0V0H885V0\"></path></g><line y1=\"0\" y2=\"305\" class=\"main todayLine\" clip-path=\"url(#clip)\" x1=\"45773.790129400375\" x2=\"45773.790129400375\"></line><g clip-path=\"url(#clip)\"><rect x=\"321.94711538461536\" y=\"6.6000000000000005\" width=\"201.39423076923083\" height=\"48.800000000000004\" class=\"mainItem past\"></rect><rect x=\"388.6057692307692\" y=\"128.6\" width=\"99.27884615384619\" height=\"48.800000000000004\" class=\"mainItem past\"></rect><rect x=\"324.7836538461538\" y=\"189.60000000000002\" width=\"199.97596153846155\" height=\"48.800000000000004\" class=\"mainItem past\"></rect><rect x=\"321.94711538461536\" y=\"250.6\" width=\"131.89903846153845\" height=\"48.800000000000004\" class=\"mainItem past\"></rect><text x=\"323.94711538461536\" y=\"24.900000000000002\" text-anchor=\"start\" class=\"itemLabel\">Item\n\n\n\n Id: 10</text><text x=\"390.6057692307692\" y=\"146.9\" text-anchor=\"start\" class=\"itemLabel\">Item\n\n\n\n Id: 58</text><text x=\"326.7836538461538\" y=\"207.90000000000003\" text-anchor=\"start\" class=\"itemLabel\">Item\n\n\n\n Id: 87</text><text x=\"323.94711538461536\" y=\"268.9\" text-anchor=\"start\" class=\"itemLabel\">Item\n\n\n\n Id: 110</text><rect x=\"421.2259615384615\" y=\"67.6\" width=\"144.6634615384615\" height=\"48.800000000000004\" class=\"mainItem past\"></rect><rect x=\"523.3413461538462\" y=\"128.6\" width=\"209.90384615384608\" height=\"48.800000000000004\" class=\"mainItem past\"></rect><text x=\"423.2259615384615\" y=\"85.9\" text-anchor=\"start\" class=\"itemLabel\">Item\n\n\n\n Id: 37</text><text x=\"525.3413461538462\" y=\"146.9\" text-anchor=\"start\" class=\"itemLabel\">Item\n\n\n\n Id: 59</text><rect x=\"628.2932692307693\" y=\"6.6000000000000005\" width=\"174.44711538461536\" height=\"48.800000000000004\" class=\"mainItem past\"></rect><rect x=\"590\" y=\"250.6\" width=\"173.0288461538462\" height=\"48.800000000000004\" class=\"mainItem past\"></rect><text x=\"630.2932692307693\" y=\"24.900000000000002\" text-anchor=\"start\" class=\"itemLabel\">Item\n\n\n\n Id: 11</text><text x=\"592\" y=\"268.9\" text-anchor=\"start\" class=\"itemLabel\">Item\n\n\n\n Id: 111</text><rect x=\"666.5865384615385\" y=\"67.6\" width=\"96.44230769230774\" height=\"48.800000000000004\" class=\"mainItem past\"></rect><rect x=\"666.5865384615385\" y=\"189.60000000000002\" width=\"131.89903846153845\" height=\"48.800000000000004\" class=\"mainItem past\"></rect><text x=\"668.5865384615385\" y=\"85.9\" text-anchor=\"start\" class=\"itemLabel\">Item\n\n\n\n Id: 38</text><text x=\"668.5865384615385\" y=\"207.90000000000003\" text-anchor=\"start\" class=\"itemLabel\">Item\n\n\n\n Id: 88</text><rect x=\"828.2692307692308\" y=\"6.6000000000000005\" width=\"215.57692307692298\" height=\"48.800000000000004\" class=\"mainItem past\"></rect><rect x=\"828.2692307692308\" y=\"67.6\" width=\"7.091346153846075\" height=\"48.800000000000004\" class=\"mainItem past\"></rect><rect x=\"867.9807692307692\" y=\"128.6\" width=\"207.06730769230774\" height=\"48.800000000000004\" class=\"mainItem past\"></rect><rect x=\"832.5240384615385\" y=\"250.6\" width=\"4.254807692307622\" height=\"48.800000000000004\" class=\"mainItem past\"></rect><text x=\"830.2692307692308\" y=\"24.900000000000002\" text-anchor=\"start\" class=\"itemLabel\">Item\n\n\n\n Id: 12</text><text x=\"830.2692307692308\" y=\"85.9\" text-anchor=\"start\" class=\"itemLabel\">Item\n\n\n\n Id: 39</text><text x=\"869.9807692307692\" y=\"146.9\" text-anchor=\"start\" class=\"itemLabel\">Item\n\n\n\n Id: 60</text><text x=\"834.5240384615385\" y=\"268.9\" text-anchor=\"start\" class=\"itemLabel\">Item\n\n\n\n Id: 112</text><rect x=\"17.01923076923077\" y=\"6.6000000000000005\" width=\"171.6105769230769\" height=\"48.800000000000004\" class=\"mainItem past\"></rect><rect x=\"53.89423076923077\" y=\"67.6\" width=\"2.83653846153846\" height=\"48.800000000000004\" class=\"mainItem past\"></rect><rect x=\"154.59134615384613\" y=\"67.6\" width=\"32.62019230769232\" height=\"48.800000000000004\" class=\"mainItem past\"></rect><rect x=\"326.2019230769231\" y=\"67.6\" width=\"2.836538461538453\" height=\"48.800000000000004\" class=\"mainItem past\"></rect><rect x=\"-53.89423076923077\" y=\"128.6\" width=\"146.08173076923077\" height=\"48.800000000000004\" class=\"mainItem past\"></rect><rect x=\"215.57692307692307\" y=\"128.6\" width=\"102.11538461538461\" height=\"48.800000000000004\" class=\"mainItem past\"></rect><rect x=\"-182.95673076923075\" y=\"189.60000000000002\" width=\"195.7211538461538\" height=\"48.800000000000004\" class=\"mainItem past\"></rect><rect x=\"87.9326923076923\" y=\"189.60000000000002\" width=\"199.97596153846155\" height=\"48.800000000000004\" class=\"mainItem past\"></rect><rect x=\"85.09615384615385\" y=\"250.6\" width=\"134.7355769230769\" height=\"48.800000000000004\" class=\"mainItem past\"></rect><text x=\"19.01923076923077\" y=\"24.900000000000002\" text-anchor=\"start\" class=\"itemLabel\">Item\n\n\n\n Id: 9</text><text x=\"55.89423076923077\" y=\"85.9\" text-anchor=\"start\" class=\"itemLabel\">Item\n\n\n\n Id: 34</text><text x=\"156.59134615384613\" y=\"85.9\" text-anchor=\"start\" class=\"itemLabel\">Item\n\n\n\n Id: 35</text><text x=\"328.2019230769231\" y=\"85.9\" text-anchor=\"start\" class=\"itemLabel\">Item\n\n\n\n Id: 36</text><text x=\"2\" y=\"146.9\" text-anchor=\"start\" class=\"itemLabel\">Item\n\n\n\n Id: 56</text><text x=\"217.57692307692307\" y=\"146.9\" text-anchor=\"start\" class=\"itemLabel\">Item\n\n\n\n Id: 57</text><text x=\"2\" y=\"207.90000000000003\" text-anchor=\"start\" class=\"itemLabel\">Item\n\n\n\n Id: 85</text><text x=\"89.9326923076923\" y=\"207.90000000000003\" text-anchor=\"start\" class=\"itemLabel\">Item\n\n\n\n Id: 86</text><text x=\"87.09615384615385\" y=\"268.9\" text-anchor=\"start\" class=\"itemLabel\">Item\n\n\n\n Id: 109</text></g></g><g transform=\"translate(60,365)\" width=\"885\" height=\"110\" class=\"mini\"><g><line x1=\"0\" y1=\"0.5\" x2=\"885\" y2=\"0.5\" stroke=\"lightgray\"></line><line x1=\"0\" y1=\"22.5\" x2=\"885\" y2=\"22.5\" stroke=\"lightgray\"></line><line x1=\"0\" y1=\"44.5\" x2=\"885\" y2=\"44.5\" stroke=\"lightgray\"></line><line x1=\"0\" y1=\"66.5\" x2=\"885\" y2=\"66.5\" stroke=\"lightgray\"></line><line x1=\"0\" y1=\"88.5\" x2=\"885\" y2=\"88.5\" stroke=\"lightgray\"></line></g><g><text x=\"-10\" y=\"11\" dy=\"0.5ex\" text-anchor=\"end\" class=\"laneText\">lane 0</text><text x=\"-10\" y=\"33.00000000000001\" dy=\"0.5ex\" text-anchor=\"end\" class=\"laneText\">lane 1</text><text x=\"-10\" y=\"55\" dy=\"0.5ex\" text-anchor=\"end\" class=\"laneText\">lane 2</text><text x=\"-10\" y=\"77.00000000000001\" dy=\"0.5ex\" text-anchor=\"end\" class=\"laneText\">lane 3</text><text x=\"-10\" y=\"99\" dy=\"0.5ex\" text-anchor=\"end\" class=\"laneText\">lane 4</text></g><g transform=\"translate(0,110)\" class=\"axis date\"><g class=\"tick\" transform=\"translate(5.6882699517943225,0)\" style=\"opacity: 1;\"><line y2=\"6\" x2=\"0\"></line><text y=\"9\" x=\"0\" dy=\".71em\" style=\"text-anchor: middle;\">09</text></g><g class=\"tick\" transform=\"translate(45.50615961435458,0)\" style=\"opacity: 1;\"><line y2=\"6\" x2=\"0\"></line><text y=\"9\" x=\"0\" dy=\".71em\" style=\"text-anchor: middle;\">16</text></g><g class=\"tick\" transform=\"translate(85.32404927691483,0)\" style=\"opacity: 1;\"><line y2=\"6\" x2=\"0\"></line><text y=\"9\" x=\"0\" dy=\".71em\" style=\"text-anchor: middle;\">23</text></g><g class=\"tick\" transform=\"translate(125.1419389394751,0)\" style=\"opacity: 1;\"><line y2=\"6\" x2=\"0\"></line><text y=\"9\" x=\"0\" dy=\".71em\" style=\"text-anchor: middle;\">30</text></g><g class=\"tick\" transform=\"translate(164.95982860203534,0)\" style=\"opacity: 1;\"><line y2=\"6\" x2=\"0\"></line><text y=\"9\" x=\"0\" dy=\".71em\" style=\"text-anchor: middle;\">06</text></g><g class=\"tick\" transform=\"translate(204.7777182645956,0)\" style=\"opacity: 1;\"><line y2=\"6\" x2=\"0\"></line><text y=\"9\" x=\"0\" dy=\".71em\" style=\"text-anchor: middle;\">13</text></g><g class=\"tick\" transform=\"translate(244.59560792715584,0)\" style=\"opacity: 1;\"><line y2=\"6\" x2=\"0\"></line><text y=\"9\" x=\"0\" dy=\".71em\" style=\"text-anchor: middle;\">20</text></g><g class=\"tick\" transform=\"translate(284.41349758971614,0)\" style=\"opacity: 1;\"><line y2=\"6\" x2=\"0\"></line><text y=\"9\" x=\"0\" dy=\".71em\" style=\"text-anchor: middle;\">27</text></g><g class=\"tick\" transform=\"translate(324.2313872522764,0)\" style=\"opacity: 1;\"><line y2=\"6\" x2=\"0\"></line><text y=\"9\" x=\"0\" dy=\".71em\" style=\"text-anchor: middle;\">05</text></g><g class=\"tick\" transform=\"translate(364.04927691483664,0)\" style=\"opacity: 1;\"><line y2=\"6\" x2=\"0\"></line><text y=\"9\" x=\"0\" dy=\".71em\" style=\"text-anchor: middle;\">12</text></g><g class=\"tick\" transform=\"translate(403.8671665773969,0)\" style=\"opacity: 1;\"><line y2=\"6\" x2=\"0\"></line><text y=\"9\" x=\"0\" dy=\".71em\" style=\"text-anchor: middle;\">19</text></g><g class=\"tick\" transform=\"translate(443.6850562399572,0)\" style=\"opacity: 1;\"><line y2=\"6\" x2=\"0\"></line><text y=\"9\" x=\"0\" dy=\".71em\" style=\"text-anchor: middle;\">26</text></g><g class=\"tick\" transform=\"translate(483.50294590251747,0)\" style=\"opacity: 1;\"><line y2=\"6\" x2=\"0\"></line><text y=\"9\" x=\"0\" dy=\".71em\" style=\"text-anchor: middle;\">02</text></g><g class=\"tick\" transform=\"translate(523.3208355650777,0)\" style=\"opacity: 1;\"><line y2=\"6\" x2=\"0\"></line><text y=\"9\" x=\"0\" dy=\".71em\" style=\"text-anchor: middle;\">09</text></g><g class=\"tick\" transform=\"translate(563.1387252276379,0)\" style=\"opacity: 1;\"><line y2=\"6\" x2=\"0\"></line><text y=\"9\" x=\"0\" dy=\".71em\" style=\"text-anchor: middle;\">16</text></g><g class=\"tick\" transform=\"translate(602.9566148901981,0)\" style=\"opacity: 1;\"><line y2=\"6\" x2=\"0\"></line><text y=\"9\" x=\"0\" dy=\".71em\" style=\"text-anchor: middle;\">23</text></g><g class=\"tick\" transform=\"translate(642.7745045527585,0)\" style=\"opacity: 1;\"><line y2=\"6\" x2=\"0\"></line><text y=\"9\" x=\"0\" dy=\".71em\" style=\"text-anchor: middle;\">30</text></g><g class=\"tick\" transform=\"translate(682.5923942153187,0)\" style=\"opacity: 1;\"><line y2=\"6\" x2=\"0\"></line><text y=\"9\" x=\"0\" dy=\".71em\" style=\"text-anchor: middle;\">07</text></g><g class=\"tick\" transform=\"translate(722.410283877879,0)\" style=\"opacity: 1;\"><line y2=\"6\" x2=\"0\"></line><text y=\"9\" x=\"0\" dy=\".71em\" style=\"text-anchor: middle;\">14</text></g><g class=\"tick\" transform=\"translate(762.2281735404392,0)\" style=\"opacity: 1;\"><line y2=\"6\" x2=\"0\"></line><text y=\"9\" x=\"0\" dy=\".71em\" style=\"text-anchor: middle;\">21</text></g><g class=\"tick\" transform=\"translate(802.0460632029994,0)\" style=\"opacity: 1;\"><line y2=\"6\" x2=\"0\"></line><text y=\"9\" x=\"0\" dy=\".71em\" style=\"text-anchor: middle;\">28</text></g><g class=\"tick\" transform=\"translate(841.8639528655598,0)\" style=\"opacity: 1;\"><line y2=\"6\" x2=\"0\"></line><text y=\"9\" x=\"0\" dy=\".71em\" style=\"text-anchor: middle;\">04</text></g><g class=\"tick\" transform=\"translate(881.68184252812,0)\" style=\"opacity: 1;\"><line y2=\"6\" x2=\"0\"></line><text y=\"9\" x=\"0\" dy=\".71em\" style=\"text-anchor: middle;\">11</text></g><path class=\"domain\" d=\"M0,0V0H885V0\"></path></g><g transform=\"translate(0,0.5)\" class=\"axis month\"><g class=\"tick\" transform=\"translate(136.51847884306375,0)\" style=\"opacity: 1;\"><line y2=\"-15\" x2=\"0\"></line><text y=\"-18\" x=\"0\" dy=\"12\" dx=\"5\" style=\"text-anchor: middle;\">Feb 2012</text></g><g class=\"tick\" transform=\"translate(301.47830744509906,0)\" style=\"opacity: 1;\"><line y2=\"-15\" x2=\"0\"></line><text y=\"-18\" x=\"0\" dy=\"12\" dx=\"5\" style=\"text-anchor: middle;\">Mar 2012</text></g><g class=\"tick\" transform=\"translate(477.8146759507231,0)\" style=\"opacity: 1;\"><line y2=\"-15\" x2=\"0\"></line><text y=\"-18\" x=\"0\" dy=\"12\" dx=\"5\" style=\"text-anchor: middle;\">Apr 2012</text></g><g class=\"tick\" transform=\"translate(648.4627745045528,0)\" style=\"opacity: 1;\"><line y2=\"-15\" x2=\"0\"></line><text y=\"-18\" x=\"0\" dy=\"12\" dx=\"5\" style=\"text-anchor: middle;\">May 2012</text></g><g class=\"tick\" transform=\"translate(824.7991430101767,0)\" style=\"opacity: 1;\"><line y2=\"-15\" x2=\"0\"></line><text y=\"-18\" x=\"0\" dy=\"12\" dx=\"5\" style=\"text-anchor: middle;\">Jun 2012</text></g><path class=\"domain\" d=\"M0,0V0H885V0\"></path></g><line x1=\"7951.290851833379\" y1=\"0\" x2=\"7951.290851833379\" y2=\"110\" class=\"todayLine\"></line><g><path class=\"miniItem past\" d=\"M 24.886181039100162 11.5 H 54.27557579003749M 65.41510444563471 11.5 H 92.9084092126406M 111.15827530798073 11.5 H 140.54767005891807M 155.7163899303696 11.5 H 167.32994108194967M 184.63176218532405 11.5 H 191.2680771290841M 212.83610069630424 11.5 H 237.0112479914301M 241.0404392072844 11.5 H 270.66684520621317M 275.8810926620246 11.5 H 287.0206213176219M 293.65693626138193 11.5 H 298.3971612212105M 304.32244242099625 11.5 H 333.00080342795934M 355.2798607391537 11.5 H 388.9354579539368M 406.47429030530265 11.5 H 435.62667380824854M 439.89287627209427 11.5 H 475.9185859667916M 497.2495982860204 11.5 H 514.5514193893948M 525.9279592929835 11.5 H 536.5934654525977M 549.392072844135 11.5 H 550.1031065881092M 560.5316014997322 11.5 H 577.1223888591323M 599.8754686663096 11.5 H 629.0278521692555M 652.0179432244242 11.5 H 686.621585431173M 708.1896089983932 11.5 H 708.6636314943761M 725.2544188537761 11.5 H 742.5562399571505M 753.6957686127477 11.5 H 764.835297268345M 770.0495447241565 11.5 H 799.9129619710766M 816.2667380824853 11.5 H 850.1593465452597M 872.4384038564542 11.5 H 885M 26.308248527048743 33.5 H 49.29833958221746M 53.801553294054635 33.5 H 87.22013926084628M 100.25575790037493 33.5 H 100.7297803963578M 109.97321906802357 33.5 H 110.44724156400643M 133.91135511515802 33.5 H 163.30074986609534M 172.78119978575256 33.5 H 200.98553829673273M 224.68666309587576 33.5 H 225.63470808784146M 248.15077664702733 33.5 H 259.0532940546331M 264.2675415104446 33.5 H 286.30958757364755M 310.48473486877344 33.5 H 310.9587573647563M 327.31253347616496 33.5 H 332.7637921799679M 355.99089448312805 33.5 H 356.4649169791109M 371.87064809855383 33.5 H 396.0457953936797M 412.87359400107124 33.5 H 428.9903588644885M 439.89287627209427 33.5 H 441.07793251205146M 458.14274236743444 33.5 H 475.2075522228174M 497.48660953401173 33.5 H 504.12292447777185M 508.62613818960904 33.5 H 510.2852169255491M 531.3792179967863 33.5 H 554.1322978039635M 560.7686127477236 33.5 H 595.6092662024639M 605.5637386181039 33.5 H 640.4043920728442M 657.7062131762186 33.5 H 679.7482592394215M 684.962506695233 33.5 H 719.0921264059989M 736.1569362613818 33.5 H 742.3192287091591M 759.858061060525 33.5 H 770.0495447241565M 25.12319228709159 55.5 H 32.47054097482592M 47.876272094268884 55.5 H 82.47991430101767M 105.70701660417782 55.5 H 129.17113015532942M 151.45018746652386 55.5 H 173.018211033744M 190.08302088912694 55.5 H 219.70942688805573M 240.80342795929297 55.5 H 274.9330476700589M 292.47188002142474 55.5 H 316.88403856454204M 337.5040171397965 55.5 H 354.56882699517945M 366.4193893947509 55.5 H 383.0101767541511M 388.9354579539368 55.5 H 424.0131226566685M 446.5291912158543 55.5 H 481.1328334226031M 487.05811462238887 55.5 H 487.53213711837174M 492.0353508302089 55.5 H 493.220407070166M 497.7236207820032 55.5 H 502.4638457418318M 520.9507230851634 55.5 H 531.6162292447777M 555.0803427959293 55.5 H 589.2099625066952M 606.5117836100696 55.5 H 612.4370648098554M 622.3915372254955 55.5 H 633.7680771290841M 639.219335832887 55.5 H 646.8036957686128M 656.0471344402786 55.5 H 658.1802356722013M 662.2094268880558 55.5 H 697.7611140867702M 714.5889126941618 55.5 H 735.6829137653991M 759.6210498125334 55.5 H 787.1143545795394M 804.8901981788966 55.5 H 828.5913229780397M 849.4483128012855 55.5 H 857.0326727370114M 31.048473486877345 77.50000000000001 H 43.61006963042314M 65.88912694161758 77.50000000000001 H 70.8663631494376M 82.71692554900912 77.50000000000001 H 88.40519550080343M 93.38243170862346 77.50000000000001 H 99.0707016604178M 117.3205677557579 77.50000000000001 H 117.79459025174077M 140.0736475629352 77.50000000000001 H 140.54767005891807M 162.3527048741296 77.50000000000001 H 168.75200856989824M 173.2552222817354 77.50000000000001 H 186.05382967327265M 189.60899839314408 77.50000000000001 H 224.92367434386716M 247.43974290305303 77.50000000000001 H 264.74156400642744M 270.90385645420463 77.50000000000001 H 303.611408677022M 316.17300482056777 77.50000000000001 H 349.5915907873594M 355.7538832351366 77.50000000000001 H 389.17246920192827M 412.87359400107124 77.50000000000001 H 434.91564006427427M 451.2694161756829 77.50000000000001 H 480.8958221746117M 503.4118907337975 77.50000000000001 H 513.8403856454205M 526.4019817889663 77.50000000000001 H 526.8760042849492M 531.6162292447777 77.50000000000001 H 548.6810391001608M 555.3173540439208 77.50000000000001 H 565.7458489555437M 589.2099625066952 77.50000000000001 H 604.8527048741297M 627.6057846813069 77.50000000000001 H 662.92046063203M 685.6735404392073 77.50000000000001 H 702.7383502945903M 724.5433851098019 77.50000000000001 H 736.8679700053561M 754.406802356722 77.50000000000001 H 754.8808248527049M 776.9228709159079 77.50000000000001 H 799.9129619710766M 20.14595607927156 99.5 H 42.89903588644885M 59.48982324584895 99.5 H 72.28843063738618M 82.00589180503482 99.5 H 100.7297803963578M 116.37252276379219 99.5 H 144.33985002678094M 162.58971612212105 99.5 H 174.44027852169256M 190.79405463310124 99.5 H 219.70942688805573M 225.1606855918586 99.5 H 235.58918050348154M 241.0404392072844 99.5 H 253.12801285484733M 265.2155865024103 99.5 H 299.1081949651848M 315.6989823245849 99.5 H 338.21505088377074M 355.2798607391537 99.5 H 377.3219068023567M 400.07498660953405 99.5 H 428.9903588644885M 440.60391001606854 99.5 H 441.31494376004287M 457.90573111944303 99.5 H 463.1199785752544M 479.7107659346546 99.5 H 481.8438671665774M 486.584092126406 99.5 H 515.9734868773434M 537.7785216925549 99.5 H 572.6191751472951M 593.9501874665239 99.5 H 595.135243706481M 617.4143010176755 99.5 H 618.3623460096412M 622.3915372254955 99.5 H 645.855650776647M 656.9951794322443 99.5 H 669.3197643277987M 684.962506695233 99.5 H 697.9981253347617M 714.5889126941618 99.5 H 748.2445099089449M 754.406802356722 99.5 H 770.0495447241565M 788.5364220674879 99.5 H 800.1499732190681\"></path></g><rect pointer-events=\"painted\" width=\"885\" height=\"110\" visibility=\"hidden\"></rect><g class=\"x brush\" style=\"pointer-events: all; -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"><rect class=\"extent\" x=\"301.47830744509906\" width=\"147.89501874665245\" y=\"1\" height=\"109\" style=\"cursor: move;\"></rect><g class=\"resize e\" transform=\"translate(449.3733261917515,0)\" style=\"cursor: ew-resize;\"><rect x=\"-3\" width=\"6\" height=\"109\" y=\"1\" style=\"visibility: hidden;\"></rect></g><g class=\"resize w\" transform=\"translate(301.47830744509906,0)\" style=\"cursor: ew-resize;\"><rect x=\"-3\" width=\"6\" height=\"109\" y=\"1\" style=\"visibility: hidden;\"></rect></g><rect class=\"background\" x=\"0\" width=\"885\" style=\"visibility: hidden; cursor: crosshair;\"></rect></g></g></svg></div>"
                },
                "selectedType": "BeakerDisplay",
                "elapsedTime": 0
            },
            "evaluatorReader": true,
            "lineCount": 49
        },
        {
            "id": "code1BkfGs",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": [
                    "\tvar RandomData = function() {",
                    "",
                    "\t\tvar addToLane = function (chart, item) {",
                    "\t\t    var name = item.lane;",
                    "",
                    "\t\t    if (!chart.lanes[name])",
                    "\t\t        chart.lanes[name] = [];",
                    "",
                    "\t\t    var lane = chart.lanes[name];",
                    "\t\t    ",
                    "\t\t    var sublane = 0;",
                    "\t\t    while(isOverlapping(item, lane[sublane]))",
                    "\t\t    \tsublane++;",
                    "",
                    "\t\t    if (!lane[sublane]) {",
                    "\t\t    \tlane[sublane] = [];",
                    "\t\t\t}",
                    "\t\t    ",
                    "\t\t    lane[sublane].push(item);\t",
                    "\t\t};",
                    "",
                    "\t\tvar isOverlapping = function(item, lane) {",
                    "\t\t\tif (lane) {",
                    "\t\t        for (var i = 0; i < lane.length; i++) {",
                    "\t\t            var t = lane[i];",
                    "\t\t            if (item.start < t.end && item.end > t.start) {",
                    "\t\t                return true;                      ",
                    "\t\t            }",
                    "\t\t        }",
                    "\t\t\t}",
                    "\t\t    return false;",
                    "\t\t};",
                    "",
                    "        var parseData = function (data) {",
                    "            var i = 0, length = data.length, node;",
                    "            var chart = { lanes: {} };",
                    "            ",
                    "            for (i; i < length; i++) {",
                    "                var item = data[i];",
                    "",
                    "                addToLane(chart, item);",
                    "",
                    "",
                    "            }",
                    "",
                    "            return collapseLanes(chart);",
                    "        };",
                    "",
                    "        var collapseLanes = function (chart) {",
                    "        \tvar lanes = [], items = [], laneId = 0;",
                    "        \tvar now = new Date();",
                    "",
                    "        \tfor (var laneName in chart.lanes) {",
                    "        \t\tvar lane = chart.lanes[laneName];",
                    "",
                    "        \t\tfor (var i = 0; i < lane.length; i++) {",
                    "        \t\t\tvar subLane = lane[i];",
                    "",
                    "        \t\t\tlanes.push({",
                    "\t        \t\t\tid: laneId, ",
                    "\t        \t\t\tlabel: i === 0 ? laneName : ''",
                    "\t        \t\t});",
                    "",
                    "\t        \t\tfor (var j = 0; j < subLane.length; j++) {",
                    "\t        \t\t\tvar item = subLane[j];",
                    "",
                    "\t        \t\t\titems.push({",
                    "\t        \t\t\t\tid: item.id,",
                    "\t        \t\t\t\tlane: laneId,",
                    "\t        \t\t\t\tstart: item.start,",
                    "\t        \t\t\t\tend: item.end,",
                    "\t        \t\t\t\tclass: item.end > now ? 'future' : 'past',",
                    "\t        \t\t\t\tdesc: item.desc",
                    "\t        \t\t\t});",
                    "\t        \t\t}",
                    "",
                    "\t        \t\tlaneId++;",
                    "        \t\t}",
                    "        \t}",
                    "",
                    "        \treturn {lanes: lanes, items: items};",
                    "        }",
                    "",
                    "\t\tvar randomNumber = function(min, max) {",
                    "\t\t\treturn Math.floor(Math.random(0, 1) * (max - min)) + min;",
                    "\t\t};",
                    "",
                    "\t\tvar generateRandomWorkItems = function () {",
                    "\t\t\tvar data = [];",
                    "\t\t\tvar laneCount = randomNumber(5,7)",
                    "\t\t\t  , totalWorkItems = randomNumber(20,30)",
                    "\t\t\t  , startMonth = randomNumber(0,1)",
                    "\t\t\t  , startDay = randomNumber(1,28)",
                    "\t\t\t  , totalMonths = randomNumber(4,10);",
                    "",
                    "\t\t\tfor (var i = 0; i < laneCount; i++) {",
                    "\t\t\t\tvar dt = new Date(2012, startMonth, startDay);",
                    "\t\t\t\tfor (var j = 0; j < totalWorkItems; j++) {",
                    "\t\t\t\t\t",
                    "\t\t\t\t\tvar dtS = new Date(dt.getFullYear(), dt.getMonth(), dt.getDate() + randomNumber(1,5), randomNumber(8, 16), 0, 0);",
                    "",
                    "\t\t\t\t\tvar dateOffset =  randomNumber(0,7);",
                    "\t\t\t\t\tvar dt = new Date(dtS.getFullYear(), dtS.getMonth(), dtS.getDate() + dateOffset, randomNumber(dateOffset === 0 ? dtS.getHours() + 2 : 8, 18), 0, 0);",
                    "",
                    "\t\t\t\t\tvar workItem = {",
                    "\t\t\t\t\t\tid: i * totalWorkItems + j,",
                    "\t\t\t\t\t\tname: 'work item ' + j,",
                    "\t\t\t\t\t\tlane: 'lane ' + i,",
                    "\t\t\t\t\t\tstart: dtS,",
                    "\t\t\t\t\t\tend: dt,",
                    "\t\t\t\t\t\tdesc: 'This is a description.'",
                    "\t\t\t\t\t};",
                    "",
                    "\t\t\t\t\tdata.push(workItem);",
                    "\t\t\t\t}",
                    "\t\t\t}",
                    "\t\t\treturn data;",
                    "\t\t};",
                    "",
                    "\t\treturn parseData(generateRandomWorkItems());",
                    "\t};",
                    "",
                    "    window.randomData = RandomData;"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Text",
                "pluginName": "JavaScript",
                "elapsedTime": 24
            },
            "evaluatorReader": true,
            "lineCount": 123
        },
        {
            "id": "code7blrYO",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": [
                    "var data = randomData()",
                    "  , lanes = data.lanes",
                    "  , items = data.items",
                    "  , now = new Date();",
                    "",
                    "var margin = {top: 20, right: 15, bottom: 15, left: 60}",
                    "  , width = 960 - margin.left - margin.right",
                    "  , height = 500 - margin.top - margin.bottom",
                    "  , miniHeight = lanes.length * 12 + 50",
                    "  , mainHeight = height - miniHeight - 50;",
                    "",
                    "var x = d3.time.scale()",
                    "\t.domain([d3.time.sunday(d3.min(items, function(d) { return d.start; })),",
                    "\t\t\t d3.max(items, function(d) { return d.end; })])",
                    "\t.range([0, width]);",
                    "var x1 = d3.time.scale().range([0, width]);",
                    "",
                    "var ext = d3.extent(lanes, function(d) { return d.id; });",
                    "var y1 = d3.scale.linear().domain([ext[0], ext[1] + 1]).range([0, mainHeight]);",
                    "var y2 = d3.scale.linear().domain([ext[0], ext[1] + 1]).range([0, miniHeight]);",
                    "",
                    "var chart = d3.select('#chart')",
                    "\t.append('svg:svg')",
                    "\t.attr('width', width + margin.right + margin.left)",
                    "\t.attr('height', height + margin.top + margin.bottom)",
                    "\t.attr('class', 'chart');",
                    "",
                    "chart.append('defs').append('clipPath')",
                    "\t.attr('id', 'clip')",
                    "\t.append('rect')",
                    "\t\t.attr('width', width)",
                    "\t\t.attr('height', mainHeight);",
                    "",
                    "var main = chart.append('g')",
                    "\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')",
                    "\t.attr('width', width)",
                    "\t.attr('height', mainHeight)",
                    "\t.attr('class', 'main');",
                    "",
                    "var mini = chart.append('g')",
                    "\t.attr('transform', 'translate(' + margin.left + ',' + (mainHeight + 60) + ')')",
                    "\t.attr('width', width)",
                    "\t.attr('height', miniHeight)",
                    "\t.attr('class', 'mini');",
                    "",
                    "// draw the lanes for the main chart",
                    "main.append('g').selectAll('.laneLines')",
                    "\t.data(lanes)",
                    "\t.enter().append('line')",
                    "\t.attr('x1', 0)",
                    "\t.attr('y1', function(d) { return d3.round(y1(d.id)) + 0.5; })",
                    "\t.attr('x2', width)",
                    "\t.attr('y2', function(d) { return d3.round(y1(d.id)) + 0.5; })",
                    "\t.attr('stroke', function(d) { return d.label === '' ? 'white' : 'lightgray' });",
                    "",
                    "main.append('g').selectAll('.laneText')",
                    "\t.data(lanes)",
                    "\t.enter().append('text')",
                    "\t.text(function(d) { return d.label; })",
                    "\t.attr('x', -10)",
                    "\t.attr('y', function(d) { return y1(d.id + .5); })",
                    "\t.attr('dy', '0.5ex')",
                    "\t.attr('text-anchor', 'end')",
                    "\t.attr('class', 'laneText');",
                    "",
                    "// draw the lanes for the mini chart",
                    "mini.append('g').selectAll('.laneLines')",
                    "\t.data(lanes)",
                    "\t.enter().append('line')",
                    "\t.attr('x1', 0)",
                    "\t.attr('y1', function(d) { return d3.round(y2(d.id)) + 0.5; })",
                    "\t.attr('x2', width)",
                    "\t.attr('y2', function(d) { return d3.round(y2(d.id)) + 0.5; })",
                    "\t.attr('stroke', function(d) { return d.label === '' ? 'white' : 'lightgray' });",
                    "",
                    "mini.append('g').selectAll('.laneText')",
                    "\t.data(lanes)",
                    "\t.enter().append('text')",
                    "\t.text(function(d) { return d.label; })",
                    "\t.attr('x', -10)",
                    "\t.attr('y', function(d) { return y2(d.id + .5); })",
                    "\t.attr('dy', '0.5ex')",
                    "\t.attr('text-anchor', 'end')",
                    "\t.attr('class', 'laneText');",
                    "",
                    "// draw the x axis",
                    "var xDateAxis = d3.svg.axis()",
                    "\t.scale(x)",
                    "\t.orient('bottom')",
                    "\t.ticks(d3.time.mondays, (x.domain()[1] - x.domain()[0]) > 15552e6 ? 2 : 1)",
                    "\t.tickFormat(d3.time.format('%d'))",
                    "\t.tickSize(6, 0, 0);",
                    "",
                    "var x1DateAxis = d3.svg.axis()",
                    "\t.scale(x1)",
                    "\t.orient('bottom')",
                    "\t.ticks(d3.time.days, 1)",
                    "\t.tickFormat(d3.time.format('%a %d'))",
                    "\t.tickSize(6, 0, 0);",
                    "",
                    "var xMonthAxis = d3.svg.axis()",
                    "\t.scale(x)",
                    "\t.orient('top')",
                    "\t.ticks(d3.time.months, 1)",
                    "\t.tickFormat(d3.time.format('%b %Y'))",
                    "\t.tickSize(15, 0, 0);",
                    "",
                    "var x1MonthAxis = d3.svg.axis()",
                    "\t.scale(x1)",
                    "\t.orient('top')",
                    "\t.ticks(d3.time.mondays, 1)",
                    "\t.tickFormat(d3.time.format('%b - Week %W'))",
                    "\t.tickSize(15, 0, 0);",
                    "",
                    "main.append('g')",
                    "\t.attr('transform', 'translate(0,' + mainHeight + ')')",
                    "\t.attr('class', 'main axis date')",
                    "\t.call(x1DateAxis);",
                    "",
                    "main.append('g')",
                    "\t.attr('transform', 'translate(0,0.5)')",
                    "\t.attr('class', 'main axis month')",
                    "\t.call(x1MonthAxis)",
                    "\t.selectAll('text')",
                    "\t\t.attr('dx', 5)",
                    "\t\t.attr('dy', 12);",
                    "",
                    "mini.append('g')",
                    "\t.attr('transform', 'translate(0,' + miniHeight + ')')",
                    "\t.attr('class', 'axis date')",
                    "\t.call(xDateAxis);",
                    "",
                    "mini.append('g')",
                    "\t.attr('transform', 'translate(0,0.5)')",
                    "\t.attr('class', 'axis month')",
                    "\t.call(xMonthAxis)",
                    "\t.selectAll('text')",
                    "\t\t.attr('dx', 5)",
                    "\t\t.attr('dy', 12);",
                    "",
                    "// draw a line representing today's date",
                    "main.append('line')",
                    "\t.attr('y1', 0)",
                    "\t.attr('y2', mainHeight)",
                    "\t.attr('class', 'main todayLine')",
                    "\t.attr('clip-path', 'url(#clip)');",
                    "\t",
                    "mini.append('line')",
                    "\t.attr('x1', x(now) + 0.5)",
                    "\t.attr('y1', 0)",
                    "\t.attr('x2', x(now) + 0.5)",
                    "\t.attr('y2', miniHeight)",
                    "\t.attr('class', 'todayLine');",
                    "",
                    "// draw the items",
                    "var itemRects = main.append('g')",
                    "\t.attr('clip-path', 'url(#clip)');",
                    "",
                    "mini.append('g').selectAll('miniItems')",
                    "\t.data(getPaths(items))",
                    "\t.enter().append('path')",
                    "\t.attr('class', function(d) { return 'miniItem ' + d.class; })",
                    "\t.attr('d', function(d) { return d.path; });",
                    "",
                    "// invisible hit area to move around the selection window",
                    "mini.append('rect')",
                    "\t.attr('pointer-events', 'painted')",
                    "\t.attr('width', width)",
                    "\t.attr('height', miniHeight)",
                    "\t.attr('visibility', 'hidden')",
                    "\t.on('mouseup', moveBrush);",
                    "",
                    "// draw the selection area",
                    "var brush = d3.svg.brush()",
                    "\t.x(x)",
                    "\t.extent([d3.time.monday(now),d3.time.saturday.ceil(now)])",
                    "\t.on(\"brush\", display);",
                    "",
                    "mini.append('g')",
                    "\t.attr('class', 'x brush')",
                    "\t.call(brush)",
                    "\t.selectAll('rect')",
                    "\t\t.attr('y', 1)",
                    "\t\t.attr('height', miniHeight - 1);",
                    "",
                    "mini.selectAll('rect.background').remove();",
                    "display();",
                    "",
                    "function display () {",
                    "",
                    "\tvar rects, labels",
                    "\t  , minExtent = d3.time.day(brush.extent()[0])",
                    "\t  , maxExtent = d3.time.day(brush.extent()[1])",
                    "\t  , visItems = items.filter(function (d) { return d.start < maxExtent && d.end > minExtent});",
                    "",
                    "\tmini.select('.brush').call(brush.extent([minExtent, maxExtent]));\t\t",
                    "",
                    "\tx1.domain([minExtent, maxExtent]);",
                    "",
                    "\tif ((maxExtent - minExtent) > 1468800000) {",
                    "\t\tx1DateAxis.ticks(d3.time.mondays, 1).tickFormat(d3.time.format('%a %d'))",
                    "\t\tx1MonthAxis.ticks(d3.time.mondays, 1).tickFormat(d3.time.format('%b - Week %W'))\t\t",
                    "\t}",
                    "\telse if ((maxExtent - minExtent) > 172800000) {",
                    "\t\tx1DateAxis.ticks(d3.time.days, 1).tickFormat(d3.time.format('%a %d'))",
                    "\t\tx1MonthAxis.ticks(d3.time.mondays, 1).tickFormat(d3.time.format('%b - Week %W'))",
                    "\t}",
                    "\telse {",
                    "\t\tx1DateAxis.ticks(d3.time.hours, 4).tickFormat(d3.time.format('%I %p'))",
                    "\t\tx1MonthAxis.ticks(d3.time.days, 1).tickFormat(d3.time.format('%b %e'))",
                    "\t}",
                    "",
                    "",
                    "\t//x1Offset.range([0, x1(d3.time.day.ceil(now) - x1(d3.time.day.floor(now)))]);",
                    "",
                    "\t// shift the today line",
                    "\tmain.select('.main.todayLine')",
                    "\t\t.attr('x1', x1(now) + 0.5)",
                    "\t\t.attr('x2', x1(now) + 0.5);",
                    "",
                    "\t// update the axis",
                    "\tmain.select('.main.axis.date').call(x1DateAxis);",
                    "\tmain.select('.main.axis.month').call(x1MonthAxis)",
                    "\t\t.selectAll('text')",
                    "\t\t\t.attr('dx', 5)",
                    "\t\t\t.attr('dy', 12);",
                    "",
                    "\t// upate the item rects",
                    "\trects = itemRects.selectAll('rect')",
                    "\t\t.data(visItems, function (d) { return d.id; })",
                    "\t\t.attr('x', function(d) { return x1(d.start); })",
                    "\t\t.attr('width', function(d) { return x1(d.end) - x1(d.start); });",
                    "",
                    "\trects.enter().append('rect')",
                    "\t\t.attr('x', function(d) { return x1(d.start); })",
                    "\t\t.attr('y', function(d) { return y1(d.lane) + .1 * y1(1) + 0.5; })",
                    "\t\t.attr('width', function(d) { return x1(d.end) - x1(d.start); })",
                    "\t\t.attr('height', function(d) { return .8 * y1(1); })",
                    "\t\t.attr('class', function(d) { return 'mainItem ' + d.class; });",
                    "",
                    "\trects.exit().remove();",
                    "",
                    "\t// update the item labels",
                    "\tlabels = itemRects.selectAll('text')",
                    "\t\t.data(visItems, function (d) { return d.id; })",
                    "\t\t.attr('x', function(d) { return x1(Math.max(d.start, minExtent)) + 2; });",
                    "\t\t\t\t",
                    "\tlabels.enter().append('text')",
                    "\t\t.text(function (d) { return 'Item\\n\\n\\n\\n Id: ' + d.id; })",
                    "\t\t.attr('x', function(d) { return x1(Math.max(d.start, minExtent)) + 2; })",
                    "\t\t.attr('y', function(d) { return y1(d.lane) + .4 * y1(1) + 0.5; })",
                    "\t\t.attr('text-anchor', 'start')",
                    "\t\t.attr('class', 'itemLabel');",
                    "",
                    "\tlabels.exit().remove();",
                    "}",
                    "",
                    "function moveBrush () {",
                    "\tvar origin = d3.mouse(this)",
                    "\t  , point = x.invert(origin[0])",
                    "\t  , halfExtent = (brush.extent()[1].getTime() - brush.extent()[0].getTime()) / 2",
                    "\t  , start = new Date(point.getTime() - halfExtent)",
                    "\t  , end = new Date(point.getTime() + halfExtent);",
                    "",
                    "\tbrush.extent([start,end]);",
                    "\tdisplay();",
                    "}",
                    "",
                    "// generates a single path for each item class in the mini display",
                    "// ugly - but draws mini 2x faster than append lines or line generator",
                    "// is there a better way to do a bunch of lines as a single path with d3?",
                    "function getPaths(items) {",
                    "\tvar paths = {}, d, offset = .5 * y2(1) + 0.5, result = [];",
                    "\tfor (var i = 0; i < items.length; i++) {",
                    "\t\td = items[i];",
                    "\t\tif (!paths[d.class]) paths[d.class] = '';\t",
                    "\t\tpaths[d.class] += ['M',x(d.start),(y2(d.lane) + offset),'H',x(d.end)].join(' ');",
                    "\t}",
                    "",
                    "\tfor (var className in paths) {",
                    "\t\tresult.push({class: className, path: paths[className]});",
                    "\t}",
                    "",
                    "\treturn result;",
                    "}"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "BeakerDisplay",
                "pluginName": "JavaScript",
                "elapsedTime": 47
            },
            "evaluatorReader": true,
            "lineCount": 285
        }
    ],
    "namespace": {}
}
