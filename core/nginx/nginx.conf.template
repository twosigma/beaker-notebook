# Copyright 2015 TWO SIGMA OPEN SOURCE, LLC
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#           http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

worker_processes  1;
daemon off;
# change this from error to debug for debugging
error_log  "%(nginx_dir)s/logs/nginx.log" error;
pid nginx.pid;

events {
  worker_connections  1024;
}

http {
  include mime.types;

  # turn this on for debugging
  #access_log %(nginx_dir)s/logs/access.log;
  access_log off;

  sendfile on;
  tcp_nopush on;

  # i tried setting to 0 and removing the keepalive timer from the ipython client.
  # but it did not fix the problem.
  #keepalive_timeout  0;
  keepalive_timeout  1000;

  proxy_connect_timeout   %(proxy_connect_timeout)s;
  proxy_send_timeout      90;
  proxy_read_timeout      1000000;
  proxy_buffers           32 4k;
  client_max_body_size    100M;
  client_body_buffer_size 128k;
  client_body_temp_path   "client_temp";
  proxy_temp_path         "client_temp";
  fastcgi_temp_path       "client_temp";
  uwsgi_temp_path         "client_temp";
  scgi_temp_path          "client_temp";

  server {
    autoindex off;

    # enable requests for specific instances in multi-user environments
    # where a request could be routed to one of many server instances
    # /beaker/<uuid>/foo -> /foo
    rewrite "^/beaker/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/(.*)$" /%(urlhash)s$1 last;

    %(listen_section)s

    # redirect server error pages to the static page /50x.html and serve them directly from static html directory
    error_page   500 502 503 504  /static/50x.html;
    location /static/ {
      alias "%(static_dir)s/static/";
    }

    # login and loginrest are used for the public server option
    location /loginrest/ {
      proxy_pass http://127.0.0.1:%(port_beaker)s/rest/login/;
      proxy_set_header Authorization "Basic %(auth)s";
    }
    location /login/ {
      alias "%(static_dir)s/static/";
    }

    # redirect to the starting page
    location = / {
      return 301 $scheme://$http_host%(start_page)s;
    }
    location = /beaker {
      return 301 $scheme://$http_host%(start_page)s;
    }

    # version get request
    location = /version {
      add_header Access-Control-Allow-Origin *;
      return 301 "/%(urlhash)sbeaker/rest/util/version";
    }

    location /%(urlhash)sbeaker/rest/util/version {
      proxy_pass http://127.0.0.1:%(port_beaker)s/rest/util/version;
      proxy_http_version 1.1;
      proxy_set_header Authorization "Basic %(auth)s";
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      add_header Access-Control-Allow-Origin *;
    }

    # user directory
    location /user {
      sendfile off;
      expires           0s;
      add_header        Cache-Control private;
      alias "%(user_folder)s";
    }

    # this is the main beaker index page - auto generated via rest call
    location = /beaker/ {
      %(auth_cookie_rule)s
      proxy_pass http://127.0.0.1:%(port_beaker)s/rest/util/getMainPage;
      proxy_set_header Authorization "Basic %(auth)s";
      add_header Set-Cookie "beakerauth=%(sessionauth)s; path=/";
    }
    location = /%(urlhash)s/beaker/ {
      return 301 $scheme://$http_host%(start_page)s;
    }

    # this serves the actual (static) content
    location /%(urlhash)sbeaker/ {
      %(auth_cookie_rule)s
      rewrite ^/%(urlhash)sbeaker/(.*)$ /$1 break;
      root "%(static_dir)s/";
      try_files $uri @dopass;
    }

    # serve the static plugin content
    location /%(urlhash)sbeaker/plugins/ {
      %(auth_cookie_rule)s
      rewrite ^/%(urlhash)sbeaker/(.*)$ /$1 break;
      root "%(static_dir)s/../../../config/";
      try_files $uri @dopass;
    }

    # forward websockets, auth using path instead of token
    location /%(urlhash)sbeaker/cometd-%(sessionauth)s/ {
      %(auth_cookie_rule)s
      rewrite ^/%(urlhash)sbeaker/(.*)$ /$1 break;
      proxy_pass http://127.0.0.1:%(port_beaker)s/beaker;
      proxy_http_version 1.1; 
      proxy_set_header Authorization "Basic %(auth)s";
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
    }

    # forward all other urls
    location @dopass {
      if ($cookie_beakerauth != "%(sessionauth)s") {
        return 403;
      }
      %(auth_cookie_rule)s
      proxy_pass http://127.0.0.1:%(port_beaker)s;
      proxy_http_version 1.1;
      proxy_set_header Authorization "Basic %(auth)s";
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
    }

    %(plugin_section)s
    %(extra_rules)s
    %(catch_outdated_requests_rule)s
  }
  server {
    listen 127.0.0.1:%(port_restart)s;

    location = /restart.%(restart_id)s/present.html {
      alias  "%(static_dir)s/static/present.html";
    }
  }
}
